{"version":3,"sources":["Navlist.js","Messages.js","Form.js","ShowWeather.js","App.js","serviceWorker.js","index.js"],"names":["NavList","react_default","a","createElement","className","NavLink","activeStyle","textDecoration","exact","to","React","Component","Messages","Fragment","this","props","doubleText","Form","onSubmit","getCity","placeholder","type","onChange","updateValue","src_Messages","ShowWeather","_this","style","display","marginTop","flexDirection","flexWrap","cities","map","city","index","key","width","height","src","img","temp","ident","onClick","deleteCity","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cityName","formsubmitted","event","_this2","preventDefault","axios","post","concat","then","res","console","log","data","objects","name","toUpperCase","weather","icon","Math","round","main","tempCityArray","toConsumableArray","find","setState","setTimeout","target","value","buttonIndex","getAttribute","copyOfCities","assign","splice","_this3","BrowserRouter","Navlist","Route","path","render","src_Form","bind","Switch","src_ShowWeather","Redirect","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d66c19bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass NavList extends React.Component{\r\n   render(){\r\n\r\n      return(\r\n        <ul className=\"nav\">\r\n          <li className=\"nav-item\">\r\n            <NavLink activeStyle={{ textDecoration: 'underline' }}  className=\"nav-link text-primary\" exact to=\"/\">Search</NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink activeStyle={{ textDecoration: 'underline' }}  className=\"text-primary nav-link\" to=\"/showweather\">Show Weather</NavLink>\r\n          </li>\r\n        </ul>\r\n      )\r\n   }\r\n}\r\n\r\nexport default NavList;\r\n","import React from \"react\";\r\n\r\nclass Messages extends React.Component{\r\n   render(){\r\n     return(\r\n       <React.Fragment>\r\n       <div className=\"my-3\">\r\n          {this.props.doubleText && <div className=\"alert alert-danger\">This City exist already!</div>}\r\n       </div>\r\n       </React.Fragment>\r\n     )\r\n   }\r\n}\r\n\r\nexport default Messages;\r\n","import React, {Component} from \"react\";\r\nimport Messages from \"./Messages\";\r\n\r\nclass Form extends Component{\r\n  render(){\r\n     return(\r\n        <>\r\n                    <form className=\"my-5\" onSubmit={this.props.getCity}>\r\n                        <div className=\"d-flex input-group\">\r\n                          <input placeholder=\"Type a city here\" type=\"text\" onChange={this.props.updateValue} className=\"form-control\"/>\r\n                          <div className=\"input-group-append\">\r\n                             <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                          </div>\r\n                       </div>\r\n                         <Messages doubleText={this.props.doubleText} />\r\n                    </form>\r\n\r\n        </>\r\n     )\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass ShowWeather extends React.Component{\r\n   render(){\r\n     return(\r\n        <>\r\n               <div style={{display: \"flex\", marginTop: \"3vw\", flexDirection: \"row\", flexWrap: \"wrap\"}}>\r\n                    {this.props.cities.map((city, index) => {\r\n                      return(\r\n\r\n                            <div key={index} className=\"test card mr-3 my-1 col-xs-12 col-sm-3 col-lg-3 border border-secondary py-2\">\r\n                                   <h3 index={index} className=\"cityTitle\">{city.city}</h3>\r\n                                   <img style={{width: \"60%\", height: \"60%\"}} className=\"weatherApp\" src={city.img} />\r\n                                   <span className=\"display-4\">{city.temp + \"Â°\"}</span>\r\n                                   <span ident={index} onClick={this.props.deleteCity} className=\"deleteButton\">&times;</span>\r\n                              </div>\r\n                       )\r\n                     }\r\n                    )}\r\n              </div>\r\n        </>\r\n     )\r\n\r\n   }\r\n}\r\n\r\nexport default ShowWeather;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavList from \"./Navlist\";\nimport {Route, BrowserRouter, Redirect, Switch} from \"react-router-dom\";\nimport Form from \"./Form\";\nimport ShowWeather from \"./ShowWeather\";\nimport axios from 'axios';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n     cityName: \"\", cities: [], formsubmitted: false, doubleText: false\n    }\n  }\n\n  getCity(event){\n    event.preventDefault();\n     //this.setState({loading: true})\n     const authToken = '16d4785f9c10724266053adb3c29dcfd';\n     axios.post(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&APPID=${authToken}`)\n     .then(res => {\n       console.log(res);\n       console.log(res.data);\n\n       let objects = {city: res.data.name.toUpperCase(),\n                      img: `http://openweathermap.org/img/w/${res.data.weather[0].icon}.png`,\n                      temp: Math.round(res.data.main.temp - 273)};\n\n      let tempCityArray = [...this.state.cities, objects];\n      const findCity = this.state.cities.find(city => city.city === this.state.cityName);\n\n      if(findCity){\n        this.setState({doubleText: true})\n      }\n\n      else{\n                this.setState({\n                cities: tempCityArray,\n                cityName: \"\",\n                formsubmitted: true,\n                doubleText: false,\n            })\n          }\n\n\n\n         setTimeout(() => this.setState({formsubmitted: false}), 0)\n     })\n\n  }\n\n  updateValue(event){\n    this.setState({\n      cityName: event.target.value.toUpperCase()\n    })\n  }\n\n  deleteCity(event){\n     const buttonIndex = event.target.getAttribute(\"ident\");\n     console.log(buttonIndex);\n     const copyOfCities = Object.assign([], this.state.cities);\n     copyOfCities.splice(buttonIndex, 1);\n\n     this.setState({\n       cities: copyOfCities,\n       doubleText: false\n\n     })\n  }\n\n  render() {\n    return (\n    <BrowserRouter>\n     <>\n        <h1 className=\"logo display-3 text-center my-5\">Weather App</h1>\n        <div className=\"container my-5\">\n          <div className=\"jumbotron opac\">\n              <NavList />\n              <Route exact path=\"/\" render={() => <Form getCity={this.getCity.bind(this)} doubleText={this.state.doubleText} updateValue={this.updateValue.bind(this)} />} />\n              <Switch>\n                  <Route path=\"/showweather\" render={() => <ShowWeather index={this.props.cities} deleteCity={this.deleteCity.bind(this)} doubleText={this.state.doubleText} cities={this.state.cities} />} />\n                  {this.state.formsubmitted && <Redirect to=\"/showweather\" />}\n             </Switch>\n          </div>\n        </div>\n      </>\n     </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}